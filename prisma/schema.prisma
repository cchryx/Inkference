// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////// AUTH //////////
model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  nameUpdatedAt DateTime?

  email          String    @unique
  emailVerified  Boolean
  emailUpdatedAt DateTime?

  username          String?   @unique
  displayUsername   String?   @unique
  usernameUpdatedAt DateTime?

  phoneNumber          BigInt?   @unique
  phoneNumberUpdatedAt DateTime?

  image          String?
  imageUpdatedAt DateTime?

  sessions Session[]
  accounts Account[]

  Profile  Profile?
  UserData UserData?

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannerImage          String?
  bannerImageUpdatedAt DateTime?

  bio          String?   @db.VarChar(800)
  bioUpdatedAt DateTime?

  birthdate          Int?
  birthdateUpdatedAt DateTime?

  address          String?
  addressUpdatedAt DateTime?

  socialLinks          String[]  @db.VarChar(255)
  socialLinksUpdatedAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model UserData {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects              Project[]
  projectsContributedTo Project[] @relation("ProjectContributors")
  projectsLiked         Project[] @relation("ProjectLikes")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectGalleryImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       String
  description String? @db.VarChar(500)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_gallery_images")
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETE
}

model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @db.VarChar(80)
  summary     String? @db.VarChar(200)
  description String? @db.VarChar(5000)

  projectLinks     String[] @db.VarChar(255)
  projectResources String[] @db.VarChar(255)

  iconImage   String?
  bannerImage String?

  status    ProjectStatus
  startDate DateTime?
  endDate   DateTime?

  skills String[] @db.VarChar(50)

  // Contributors (many-to-many)
  contributors UserData[] @relation("ProjectContributors")

  // Liked by users (many-to-many)
  likes UserData[] @relation("ProjectLikes")

  galleryImages ProjectGalleryImage[]

  // Project owner
  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  @@index([userDataId, updatedAt])
  @@map("projects")
}
