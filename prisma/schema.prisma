// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

////////// AUTH //////////
model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  nameUpdatedAt DateTime?

  email          String    @unique
  emailVerified  Boolean
  emailUpdatedAt DateTime?

  username          String?   @unique
  displayUsername   String?   @unique
  usernameUpdatedAt DateTime?

  phoneNumber          BigInt?   @unique
  phoneNumberUpdatedAt DateTime?

  image          String?
  imageUpdatedAt DateTime?

  sessions Session[]
  accounts Account[]

  Profile       Profile?
  UserData      UserData?
  Relationships Relationships?

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannerImage          String?
  bannerImageUpdatedAt DateTime?

  bio          String?   @db.VarChar(800)
  bioUpdatedAt DateTime?

  birthdate          Int?
  birthdateUpdatedAt DateTime?

  address          String?
  addressUpdatedAt DateTime?

  socialLinks          String[]  @db.VarChar(255)
  socialLinksUpdatedAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model UserData {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects              Project[]
  projectsContributedTo Project[] @relation("ProjectContributors")
  projectsLiked         Project[] @relation("ProjectLikes")
  projectsViewed        Project[] @relation("ProjectViews")
  projectsSaved         Project[] @relation("ProjectSaves")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  experiences Experience[]
  educations  Education[]
  merits      Merit[]
  posts       Post[]
  skills      Skill[]      @relation("UserSkills")
  galleries   Gallery[]

  postsLiked  Post[] @relation("PostLikes")
  postsViewed Post[] @relation("PostViews")
  postsSaved  Post[] @relation("PostSaves")

  @@map("userData")
}

model ProjectGalleryImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       String
  description String? @db.VarChar(500)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_gallery_images")
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETE
}

model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @db.VarChar(80)
  summary     String? @db.VarChar(200)
  description String? @db.VarChar(5000)

  projectLinks     String[] @db.VarChar(255)
  projectResources String[] @db.VarChar(255)

  iconImage   String?
  bannerImage String?

  status    ProjectStatus
  startDate DateTime?
  endDate   DateTime?

  contributors UserData[] @relation("ProjectContributors")

  views UserData[] @relation("ProjectViews")
  likes UserData[] @relation("ProjectLikes")
  saves UserData[] @relation("ProjectSaves")

  galleryImages ProjectGalleryImage[]

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)
  skills     Skill[]  @relation("ProjectSkills")

  @@index([userDataId, updatedAt])
  @@map("projects")
}

model Relationships {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isPrivate Boolean @default(false)

  following Relationships[] @relation("UserFollows")
  followers Relationships[] @relation("UserFollows")

  friends  Relationships[] @relation("UserFriends")
  friendOf Relationships[] @relation("UserFriends")

  blockedUsers Relationships[] @relation("UserBlocks")
  blockedBy    Relationships[] @relation("UserBlocks")

  followRequestsSent     Relationships[] @relation("FollowRequests")
  followRequestsReceived Relationships[] @relation("FollowRequests")

  friendRequestsSent     Relationships[] @relation("FriendRequests")
  friendRequestsReceived Relationships[] @relation("FriendRequests")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("relationships")
}

model Experience {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title        String @db.VarChar(60)
  organization String @db.VarChar(100)
  description  String @db.Text

  startDate DateTime
  endDate   DateTime?
  status    String

  location       String @db.VarChar(100)
  locationType   String
  employmentType String

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)
  skills     Skill[]  @relation("ExperienceSkills")

  @@index([userDataId, updatedAt])
  @@map("experiences")
}

model Education {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  degree                 String
  fieldOfStudy           String
  school                 String
  activitiesAndSocieties String

  startDate DateTime
  endDate   DateTime

  @@index([userDataId, updatedAt])
  @@map("educations")
}

model Merit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  title     String @db.VarChar(100)
  issuer    String @db.VarChar(100)
  meritType String @db.VarChar(50)
  summary   String @db.Text

  issueDate  DateTime?
  expiryDate DateTime?

  image String @db.VarChar(255)

  @@index([userDataId, updatedAt])
  @@map("merits")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  type   String @db.VarChar(50)
  dataId String

  content     String[]
  description String?  @db.VarChar(2200)
  location    String?
  mentions    String[]
  tags        String[]

  views UserData[] @relation("PostViews")
  likes UserData[] @relation("PostLikes")
  saves UserData[] @relation("PostSaves")

  @@index([userDataId, updatedAt])
  @@map("posts")
}

model Skill {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       UserData[]   @relation("UserSkills")
  projects    Project[]    @relation("ProjectSkills")
  experiences Experience[] @relation("ExperienceSkills")

  name      String  @unique @db.VarChar(60)
  iconImage String?

  @@map("skills")
}

model Gallery {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(100)

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  photos Photo[]

  @@map("galleries")
}

model Photo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  image String

  @@map("photos")
}
