// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  nameUpdatedAt DateTime?

  email          String    @unique
  emailVerified  Boolean
  emailUpdatedAt DateTime?

  username          String?   @unique
  displayUsername   String?   @unique
  usernameUpdatedAt DateTime?

  image          String?
  imageUpdatedAt DateTime?

  sessions     Session[]
  accounts     Account[]
  posts        Post[]
  Profile      Profile[]
  Relationship Relationship[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannerImage          String?
  bannerImageUpdatedAt DateTime?

  bio          String?   @db.VarChar(800)
  bioUpdatedAt DateTime?

  phoneNumber          BigInt?
  phoneNumberUpdatedAt DateTime?

  birthdate          Int?
  birthdateUpdatedAt DateTime?

  address          String?
  addressUpdatedAt DateTime?

  socialLinks          String[]  @db.VarChar(255)
  socialLinksUpdatedAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Relationship {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("relationship")
}

// model Project {
//   id            String   @default(uuid())
//   title         String
//   content       String
//   imageCoverUrl String?
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   user          User     @relation(fields: [userId], references: [id])
//   userId        String
// }

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}
